//  Chang Liu 1272763
//  main.cpp
//  Homework2


#include <stdio.h>
#include <stdlib.h>
#include <GLUT/glut.h>
#include <iostream>
#include <sstream>
#include <fstream>
#include <mach-o/dyld.h>


using namespace std;

//used to store values of mouse coordinates on click
int OldX, OldY;
//stores arbitrary values for the rotation
double AngleX, AngleY;
// zoom value defines the xyz coordinate of the camera to zoom
float ZoomVal = 2;
// store the points of face-vertices
float data[7061][3];
//store the points of face-index
int in[13804][3];
float vertice_arr[13804 * 9];
float color_arr[13804 * 9];
int m = 0; // index of arr[]
int q = 0; // index of color[]

void MenuValue(int option) {
    if (option == 1) {
        glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
    }
    else if(option ==2) {
        glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
    }
    glutPostRedisplay();
}

void Zoom(unsigned char key, int x, int y) {
    if (key == 61) {
        ZoomVal-= .05;
    }
    else if (key == 93) {
        ZoomVal+= .05;
    }
    glutPostRedisplay();
}

void MouseClick(int button, int state, int x, int y) {
    //if the left button is clicked the coordinates are saved for use in rotation
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN){
        OldX = x;
        OldY = y;
    }
}

void init(void) {
    //Set background color
    glClearColor(0.0, 0.0, 0.0, 0.0);

    //Initialize lighting
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_COLOR_MATERIAL);

    //Initialize camera
    glMatrixMode(GL_PROJECTION);
    gluPerspective(50, 1, 0.1, 10);
    glMatrixMode(GL_MODELVIEW);

    //Initialize Menu and options
    glutCreateMenu(MenuValue);
    glutAddMenuEntry("Wireframe", 1);
    glutAddMenuEntry("Solid", 2);
    glutAttachMenu(GLUT_RIGHT_BUTTON);

    //Zooming in and out
    glutKeyboardFunc(Zoom);
}

void display(void) {
    //Print OpenGL errors
    GLenum err_code;
    do {
        err_code = glGetError();
        if (err_code != GL_NO_ERROR)
            printf("Error: %s\n", gluErrorString(err_code));
    } while (err_code != GL_NO_ERROR);

    //Clear buffer data
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    //Set camera
    glLoadIdentity();
    gluLookAt(ZoomVal, ZoomVal, ZoomVal, 0, 0, 0, 0, 1, 0);
    glRotated(AngleX, 0, 1, 0);
    glRotated(AngleY, 1, 0, 0);

    //Set light position
    GLfloat light_pos[] = { 2, 1, 0, 0 };
    glLightfv(GL_LIGHT0, GL_POSITION, light_pos);

    //Display face - add your code here

    // tell OpenGL that you're using a vertex array for fixed-function attribute
    glEnableClientState( GL_VERTEX_ARRAY );
    glEnableClientState( GL_COLOR_ARRAY );
    glVertexPointer(3, GL_FLOAT, 0, vertice_arr);
    glColorPointer(3, GL_FLOAT, 0, color_arr);
    //draw points array
    glDrawArrays(GL_TRIANGLES, 0, m / 3);
    //draw color array
    glDrawArrays(GL_TRIANGLES, 0, m / 3);

    glEnd();



    //Flush data
    glFlush();
}


void fillArr() {

    char path[512];
    unsigned size = 512;
    _NSGetExecutablePath(path, &size);
    path[size] = '\0';
    printf("The path is: %s\n", path);

    // get lines and seperate by comma for vertices array
    ifstream myfile("face-vertices.txt");
    string line;

    for (int i = 0; i < 7061; i++) {
        getline(myfile, line);
        if (myfile.eof()) {
            break;
        }
        istringstream ss(line);
        string token;
        int j = 0;
        while(getline(ss, token, ',')) {
            data[i][j] = (float)atof(token.c_str());
            j++;

        }

    }
    myfile.close();

    ifstream myfile2("face-index.txt");
    string line2;

    // get lines and seperate by comma for index array.
    for (int i = 0; i < 13804; i++) {
        getline(myfile2, line2);
        if (myfile2.eof()) {
            break;
        }
        istringstream sst(line2);
        string token2;
        int j = 0;
        while(getline(sst, token2, ',')) {
            in[i][j] = atoi(token2.c_str());
            j++;

        }

    }
    myfile2.close();

    // build the final vertice array and color array
    for (int i = 0; i < 13804; i++) {
        for (int j = 0; j < 3; j++) {
            vertice_arr[m++] = data[in[i][j]][0];
            vertice_arr[m++] = data[in[i][j]][1];
            vertice_arr[m++] = data[in[i][j]][2];

            // create white color array : color[];
            color_arr[q++] = 1;
            color_arr[q++] = 1;
            color_arr[q++] = 1;
        }
    }



}

void RotateObject(int x, int y) {
    double diffX, diffY;
    //calculate the difference of old x value to current
    diffX = x - OldX;
    diffY = y - OldY;
    //arbitrarily scales the difference
    diffX = diffX / 2;
    diffY = diffY / 2;
    //creates and alters the angle to rotate by
    AngleX += diffX;
    AngleY += diffY;
    //reassigns x and y value to be continuously used over and over
    OldX = x;
    OldY = y;
    glutPostRedisplay();
}

int main(int argc, char** argv) {
    fillArr();
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);

    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Assignment 2");
    init();

    glutDisplayFunc(display);

    //Rotational
    glutMotionFunc(RotateObject);
    glutMouseFunc(MouseClick);

    glutMainLoop();

    return 0;
}
